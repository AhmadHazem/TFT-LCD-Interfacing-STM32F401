
TFT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a000  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af08  0800af08  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800af08  0800af08  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af08  0800af08  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af08  0800af08  0001af08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800af10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000002c  0800af3c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  0800af3c  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001270  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000767  00000000  00000000  0002130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010a  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f23  00000000  00000000  00021d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dce  00000000  00000000  00022c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003dd2  00000000  00000000  00023a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000003e0  00000000  00000000  000277e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00027bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ef0 	.word	0x08000ef0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000ef0 	.word	0x08000ef0

080001d4 <Det_ReportError>:
#include "BIT_MATH.h"

#include "DET.h"

void Det_ReportError(uint8 u8ModuleId, uint8 u8FunctionId, uint8 u8ErrorId)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	while(1);
 80001e6:	e7fe      	b.n	80001e6 <Det_ReportError+0x12>

080001e8 <GPIO_Init>:

static GPIO_type* GPIOx[3]={GPIOA,GPIOB,GPIOC};
static uint8 u8PinsCounter = 0u;

void GPIO_Init (void)
{
 80001e8:	b598      	push	{r3, r4, r7, lr}
 80001ea:	af00      	add	r7, sp, #0

		if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId >= GPIO_UPPER_PINS_NUMBERS)
 80001ec:	4ba2      	ldr	r3, [pc, #648]	; (8000478 <GPIO_Init+0x290>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4aa2      	ldr	r2, [pc, #648]	; (800047c <GPIO_Init+0x294>)
 80001f4:	460b      	mov	r3, r1
 80001f6:	00db      	lsls	r3, r3, #3
 80001f8:	1a5b      	subs	r3, r3, r1
 80001fa:	4413      	add	r3, r2
 80001fc:	3301      	adds	r3, #1
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b0f      	cmp	r3, #15
 8000202:	d904      	bls.n	800020e <GPIO_Init+0x26>
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000204:	2202      	movs	r2, #2
 8000206:	2102      	movs	r1, #2
 8000208:	2002      	movs	r0, #2
 800020a:	f7ff ffe3 	bl	80001d4 <Det_ReportError>

		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800020e:	4b9a      	ldr	r3, [pc, #616]	; (8000478 <GPIO_Init+0x290>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	4a99      	ldr	r2, [pc, #612]	; (800047c <GPIO_Init+0x294>)
 8000216:	460b      	mov	r3, r1
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	1a5b      	subs	r3, r3, r1
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3b01      	subs	r3, #1
 8000222:	4a97      	ldr	r2, [pc, #604]	; (8000480 <GPIO_Init+0x298>)
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b93      	ldr	r3, [pc, #588]	; (8000478 <GPIO_Init+0x290>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4618      	mov	r0, r3
 8000230:	4992      	ldr	r1, [pc, #584]	; (800047c <GPIO_Init+0x294>)
 8000232:	4603      	mov	r3, r0
 8000234:	00db      	lsls	r3, r3, #3
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	440b      	add	r3, r1
 800023a:	3301      	adds	r3, #1
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43db      	mvns	r3, r3
 8000248:	461c      	mov	r4, r3
 800024a:	4b8b      	ldr	r3, [pc, #556]	; (8000478 <GPIO_Init+0x290>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	498a      	ldr	r1, [pc, #552]	; (800047c <GPIO_Init+0x294>)
 8000252:	4603      	mov	r3, r0
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	1a1b      	subs	r3, r3, r0
 8000258:	440b      	add	r3, r1
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3b01      	subs	r3, #1
 800025e:	4988      	ldr	r1, [pc, #544]	; (8000480 <GPIO_Init+0x298>)
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	4022      	ands	r2, r4
 8000266:	601a      	str	r2, [r3, #0]
		GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->MODER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtMode) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000268:	4b83      	ldr	r3, [pc, #524]	; (8000478 <GPIO_Init+0x290>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	4a83      	ldr	r2, [pc, #524]	; (800047c <GPIO_Init+0x294>)
 8000270:	460b      	mov	r3, r1
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	3b01      	subs	r3, #1
 800027c:	4a80      	ldr	r2, [pc, #512]	; (8000480 <GPIO_Init+0x298>)
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b7c      	ldr	r3, [pc, #496]	; (8000478 <GPIO_Init+0x290>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	497c      	ldr	r1, [pc, #496]	; (800047c <GPIO_Init+0x294>)
 800028c:	4603      	mov	r3, r0
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	1a1b      	subs	r3, r3, r0
 8000292:	440b      	add	r3, r1
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461c      	mov	r4, r3
 800029a:	4b77      	ldr	r3, [pc, #476]	; (8000478 <GPIO_Init+0x290>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	4976      	ldr	r1, [pc, #472]	; (800047c <GPIO_Init+0x294>)
 80002a2:	4603      	mov	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	440b      	add	r3, r1
 80002aa:	3301      	adds	r3, #1
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	fa04 f303 	lsl.w	r3, r4, r3
 80002b4:	461c      	mov	r4, r3
 80002b6:	4b70      	ldr	r3, [pc, #448]	; (8000478 <GPIO_Init+0x290>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	496f      	ldr	r1, [pc, #444]	; (800047c <GPIO_Init+0x294>)
 80002be:	4603      	mov	r3, r0
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	1a1b      	subs	r3, r3, r0
 80002c4:	440b      	add	r3, r1
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	496d      	ldr	r1, [pc, #436]	; (8000480 <GPIO_Init+0x298>)
 80002cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d0:	4322      	orrs	r2, r4
 80002d2:	601a      	str	r2, [r3, #0]
		if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_OUTPUT)
 80002d4:	4b68      	ldr	r3, [pc, #416]	; (8000478 <GPIO_Init+0x290>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	4a68      	ldr	r2, [pc, #416]	; (800047c <GPIO_Init+0x294>)
 80002dc:	460b      	mov	r3, r1
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	4413      	add	r3, r2
 80002e4:	3302      	adds	r3, #2
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	f040 80cb 	bne.w	8000484 <GPIO_Init+0x29c>
		{
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER &= ~(1u << (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 80002ee:	4b62      	ldr	r3, [pc, #392]	; (8000478 <GPIO_Init+0x290>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4a61      	ldr	r2, [pc, #388]	; (800047c <GPIO_Init+0x294>)
 80002f6:	460b      	mov	r3, r1
 80002f8:	00db      	lsls	r3, r3, #3
 80002fa:	1a5b      	subs	r3, r3, r1
 80002fc:	4413      	add	r3, r2
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a5f      	ldr	r2, [pc, #380]	; (8000480 <GPIO_Init+0x298>)
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	6859      	ldr	r1, [r3, #4]
 800030a:	4b5b      	ldr	r3, [pc, #364]	; (8000478 <GPIO_Init+0x290>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	4a5a      	ldr	r2, [pc, #360]	; (800047c <GPIO_Init+0x294>)
 8000312:	4603      	mov	r3, r0
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	1a1b      	subs	r3, r3, r0
 8000318:	4413      	add	r3, r2
 800031a:	3301      	adds	r3, #1
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	2301      	movs	r3, #1
 8000322:	4093      	lsls	r3, r2
 8000324:	43da      	mvns	r2, r3
 8000326:	4b54      	ldr	r3, [pc, #336]	; (8000478 <GPIO_Init+0x290>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461c      	mov	r4, r3
 800032c:	4853      	ldr	r0, [pc, #332]	; (800047c <GPIO_Init+0x294>)
 800032e:	4623      	mov	r3, r4
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	1b1b      	subs	r3, r3, r4
 8000334:	4403      	add	r3, r0
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3b01      	subs	r3, #1
 800033a:	4851      	ldr	r0, [pc, #324]	; (8000480 <GPIO_Init+0x298>)
 800033c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000340:	400a      	ands	r2, r1
 8000342:	605a      	str	r2, [r3, #4]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 8000344:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <GPIO_Init+0x290>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4619      	mov	r1, r3
 800034a:	4a4c      	ldr	r2, [pc, #304]	; (800047c <GPIO_Init+0x294>)
 800034c:	460b      	mov	r3, r1
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a49      	ldr	r2, [pc, #292]	; (8000480 <GPIO_Init+0x298>)
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	4b45      	ldr	r3, [pc, #276]	; (8000478 <GPIO_Init+0x290>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	4945      	ldr	r1, [pc, #276]	; (800047c <GPIO_Init+0x294>)
 8000368:	4603      	mov	r3, r0
 800036a:	00db      	lsls	r3, r3, #3
 800036c:	1a1b      	subs	r3, r3, r0
 800036e:	440b      	add	r3, r1
 8000370:	3303      	adds	r3, #3
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461c      	mov	r4, r3
						                                                      (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
 8000376:	4b40      	ldr	r3, [pc, #256]	; (8000478 <GPIO_Init+0x290>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	493f      	ldr	r1, [pc, #252]	; (800047c <GPIO_Init+0x294>)
 800037e:	4603      	mov	r3, r0
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	1a1b      	subs	r3, r3, r0
 8000384:	440b      	add	r3, r1
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
 800038a:	fa04 f303 	lsl.w	r3, r4, r3
 800038e:	461c      	mov	r4, r3
 8000390:	4b39      	ldr	r3, [pc, #228]	; (8000478 <GPIO_Init+0x290>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	4939      	ldr	r1, [pc, #228]	; (800047c <GPIO_Init+0x294>)
 8000398:	4603      	mov	r3, r0
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a1b      	subs	r3, r3, r0
 800039e:	440b      	add	r3, r1
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4936      	ldr	r1, [pc, #216]	; (8000480 <GPIO_Init+0x298>)
 80003a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003aa:	4322      	orrs	r2, r4
 80003ac:	605a      	str	r2, [r3, #4]

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <GPIO_Init+0x290>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4a31      	ldr	r2, [pc, #196]	; (800047c <GPIO_Init+0x294>)
 80003b6:	460b      	mov	r3, r1
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	1a5b      	subs	r3, r3, r1
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	4a2f      	ldr	r2, [pc, #188]	; (8000480 <GPIO_Init+0x298>)
 80003c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <GPIO_Init+0x290>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	492a      	ldr	r1, [pc, #168]	; (800047c <GPIO_Init+0x294>)
 80003d2:	4603      	mov	r3, r0
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	1a1b      	subs	r3, r3, r0
 80003d8:	440b      	add	r3, r1
 80003da:	3301      	adds	r3, #1
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	461c      	mov	r4, r3
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <GPIO_Init+0x290>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	4922      	ldr	r1, [pc, #136]	; (800047c <GPIO_Init+0x294>)
 80003f2:	4603      	mov	r3, r0
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	1a1b      	subs	r3, r3, r0
 80003f8:	440b      	add	r3, r1
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	4920      	ldr	r1, [pc, #128]	; (8000480 <GPIO_Init+0x298>)
 8000400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000404:	4022      	ands	r2, r4
 8000406:	609a      	str	r2, [r3, #8]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <GPIO_Init+0x290>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <GPIO_Init+0x294>)
 8000410:	460b      	mov	r3, r1
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	4413      	add	r3, r2
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <GPIO_Init+0x298>)
 800041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <GPIO_Init+0x290>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	4914      	ldr	r1, [pc, #80]	; (800047c <GPIO_Init+0x294>)
 800042c:	4603      	mov	r3, r0
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	440b      	add	r3, r1
 8000434:	3304      	adds	r3, #4
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461c      	mov	r4, r3
		                        												 ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <GPIO_Init+0x290>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	490e      	ldr	r1, [pc, #56]	; (800047c <GPIO_Init+0x294>)
 8000442:	4603      	mov	r3, r0
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	1a1b      	subs	r3, r3, r0
 8000448:	440b      	add	r3, r1
 800044a:	3301      	adds	r3, #1
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000450:	fa04 f303 	lsl.w	r3, r4, r3
 8000454:	461c      	mov	r4, r3
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <GPIO_Init+0x290>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <GPIO_Init+0x294>)
 800045e:	4603      	mov	r3, r0
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	1a1b      	subs	r3, r3, r0
 8000464:	440b      	add	r3, r1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4905      	ldr	r1, [pc, #20]	; (8000480 <GPIO_Init+0x298>)
 800046c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000470:	4322      	orrs	r2, r4
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	e1ca      	b.n	800080c <GPIO_Init+0x624>
 8000476:	bf00      	nop
 8000478:	20000048 	.word	0x20000048
 800047c:	20000000 	.word	0x20000000
 8000480:	2000001c 	.word	0x2000001c
		}
		else if(GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_INPUT)
 8000484:	4b76      	ldr	r3, [pc, #472]	; (8000660 <GPIO_Init+0x478>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	4a76      	ldr	r2, [pc, #472]	; (8000664 <GPIO_Init+0x47c>)
 800048c:	460b      	mov	r3, r1
 800048e:	00db      	lsls	r3, r3, #3
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	4413      	add	r3, r2
 8000494:	3302      	adds	r3, #2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d163      	bne.n	8000564 <GPIO_Init+0x37c>
		{
			/* !Comment: Setting the input pin state */
			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800049c:	4b70      	ldr	r3, [pc, #448]	; (8000660 <GPIO_Init+0x478>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	4a70      	ldr	r2, [pc, #448]	; (8000664 <GPIO_Init+0x47c>)
 80004a4:	460b      	mov	r3, r1
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	4a6d      	ldr	r2, [pc, #436]	; (8000668 <GPIO_Init+0x480>)
 80004b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b6:	68da      	ldr	r2, [r3, #12]
 80004b8:	4b69      	ldr	r3, [pc, #420]	; (8000660 <GPIO_Init+0x478>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	4969      	ldr	r1, [pc, #420]	; (8000664 <GPIO_Init+0x47c>)
 80004c0:	4603      	mov	r3, r0
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	1a1b      	subs	r3, r3, r0
 80004c6:	440b      	add	r3, r1
 80004c8:	3301      	adds	r3, #1
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	461c      	mov	r4, r3
 80004d8:	4b61      	ldr	r3, [pc, #388]	; (8000660 <GPIO_Init+0x478>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	4961      	ldr	r1, [pc, #388]	; (8000664 <GPIO_Init+0x47c>)
 80004e0:	4603      	mov	r3, r0
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	1a1b      	subs	r3, r3, r0
 80004e6:	440b      	add	r3, r1
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	495e      	ldr	r1, [pc, #376]	; (8000668 <GPIO_Init+0x480>)
 80004ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f2:	4022      	ands	r2, r4
 80004f4:	60da      	str	r2, [r3, #12]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 80004f6:	4b5a      	ldr	r3, [pc, #360]	; (8000660 <GPIO_Init+0x478>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	4a59      	ldr	r2, [pc, #356]	; (8000664 <GPIO_Init+0x47c>)
 80004fe:	460b      	mov	r3, r1
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	1a5b      	subs	r3, r3, r1
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a57      	ldr	r2, [pc, #348]	; (8000668 <GPIO_Init+0x480>)
 800050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b53      	ldr	r3, [pc, #332]	; (8000660 <GPIO_Init+0x478>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	4952      	ldr	r1, [pc, #328]	; (8000664 <GPIO_Init+0x47c>)
 800051a:	4603      	mov	r3, r0
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	1a1b      	subs	r3, r3, r0
 8000520:	440b      	add	r3, r1
 8000522:	3305      	adds	r3, #5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	461c      	mov	r4, r3
		                      ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 8000528:	4b4d      	ldr	r3, [pc, #308]	; (8000660 <GPIO_Init+0x478>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	494d      	ldr	r1, [pc, #308]	; (8000664 <GPIO_Init+0x47c>)
 8000530:	4603      	mov	r3, r0
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	1a1b      	subs	r3, r3, r0
 8000536:	440b      	add	r3, r1
 8000538:	3301      	adds	r3, #1
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->PUPDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtInputState) <<
 800053e:	fa04 f303 	lsl.w	r3, r4, r3
 8000542:	461c      	mov	r4, r3
 8000544:	4b46      	ldr	r3, [pc, #280]	; (8000660 <GPIO_Init+0x478>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	4946      	ldr	r1, [pc, #280]	; (8000664 <GPIO_Init+0x47c>)
 800054c:	4603      	mov	r3, r0
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	1a1b      	subs	r3, r3, r0
 8000552:	440b      	add	r3, r1
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	4943      	ldr	r1, [pc, #268]	; (8000668 <GPIO_Init+0x480>)
 800055a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800055e:	4322      	orrs	r2, r4
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	e153      	b.n	800080c <GPIO_Init+0x624>
		}
		else if (GPIO_udtArrayOfPins[u8PinsCounter].udtMode == GPIO_AF)
 8000564:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <GPIO_Init+0x478>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	4a3e      	ldr	r2, [pc, #248]	; (8000664 <GPIO_Init+0x47c>)
 800056c:	460b      	mov	r3, r1
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	4413      	add	r3, r2
 8000574:	3302      	adds	r3, #2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	f040 8142 	bne.w	8000802 <GPIO_Init+0x61a>
		{
			if (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId < GPIO_LOWER_PINS_NUMBERS)
 800057e:	4b38      	ldr	r3, [pc, #224]	; (8000660 <GPIO_Init+0x478>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	4a37      	ldr	r2, [pc, #220]	; (8000664 <GPIO_Init+0x47c>)
 8000586:	460b      	mov	r3, r1
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	4413      	add	r3, r2
 800058e:	3301      	adds	r3, #1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b07      	cmp	r3, #7
 8000594:	d86a      	bhi.n	800066c <GPIO_Init+0x484>
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <GPIO_Init+0x478>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	4a31      	ldr	r2, [pc, #196]	; (8000664 <GPIO_Init+0x47c>)
 800059e:	460b      	mov	r3, r1
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	1a5b      	subs	r3, r3, r1
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <GPIO_Init+0x480>)
 80005ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b0:	6a1a      	ldr	r2, [r3, #32]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <GPIO_Init+0x478>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	492a      	ldr	r1, [pc, #168]	; (8000664 <GPIO_Init+0x47c>)
 80005ba:	4603      	mov	r3, r0
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	1a1b      	subs	r3, r3, r0
 80005c0:	440b      	add	r3, r1
 80005c2:	3301      	adds	r3, #1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	210f      	movs	r1, #15
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	461c      	mov	r4, r3
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <GPIO_Init+0x478>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	4922      	ldr	r1, [pc, #136]	; (8000664 <GPIO_Init+0x47c>)
 80005da:	4603      	mov	r3, r0
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	1a1b      	subs	r3, r3, r0
 80005e0:	440b      	add	r3, r1
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4920      	ldr	r1, [pc, #128]	; (8000668 <GPIO_Init+0x480>)
 80005e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ec:	4022      	ands	r2, r4
 80005ee:	621a      	str	r2, [r3, #32]
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRL |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 4));
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <GPIO_Init+0x478>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <GPIO_Init+0x47c>)
 80005f8:	460b      	mov	r3, r1
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a18      	ldr	r2, [pc, #96]	; (8000668 <GPIO_Init+0x480>)
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	6a1a      	ldr	r2, [r3, #32]
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <GPIO_Init+0x478>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	4914      	ldr	r1, [pc, #80]	; (8000664 <GPIO_Init+0x47c>)
 8000614:	4603      	mov	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	1a1b      	subs	r3, r3, r0
 800061a:	440b      	add	r3, r1
 800061c:	3306      	adds	r3, #6
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461c      	mov	r4, r3
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <GPIO_Init+0x478>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	490e      	ldr	r1, [pc, #56]	; (8000664 <GPIO_Init+0x47c>)
 800062a:	4603      	mov	r3, r0
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	1a1b      	subs	r3, r3, r0
 8000630:	440b      	add	r3, r1
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	fa04 f303 	lsl.w	r3, r4, r3
 800063c:	461c      	mov	r4, r3
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <GPIO_Init+0x478>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <GPIO_Init+0x47c>)
 8000646:	4603      	mov	r3, r0
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	1a1b      	subs	r3, r3, r0
 800064c:	440b      	add	r3, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4905      	ldr	r1, [pc, #20]	; (8000668 <GPIO_Init+0x480>)
 8000654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000658:	4322      	orrs	r2, r4
 800065a:	621a      	str	r2, [r3, #32]
 800065c:	e06d      	b.n	800073a <GPIO_Init+0x552>
 800065e:	bf00      	nop
 8000660:	20000048 	.word	0x20000048
 8000664:	20000000 	.word	0x20000000
 8000668:	2000001c 	.word	0x2000001c
			}
			else
			{
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH &= ~((0b1111) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 800066c:	4b6b      	ldr	r3, [pc, #428]	; (800081c <GPIO_Init+0x634>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4a6b      	ldr	r2, [pc, #428]	; (8000820 <GPIO_Init+0x638>)
 8000674:	460b      	mov	r3, r1
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a68      	ldr	r2, [pc, #416]	; (8000824 <GPIO_Init+0x63c>)
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000688:	4b64      	ldr	r3, [pc, #400]	; (800081c <GPIO_Init+0x634>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	4964      	ldr	r1, [pc, #400]	; (8000820 <GPIO_Init+0x638>)
 8000690:	4603      	mov	r3, r0
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	1a1b      	subs	r3, r3, r0
 8000696:	440b      	add	r3, r1
 8000698:	3301      	adds	r3, #1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	210f      	movs	r1, #15
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	461c      	mov	r4, r3
 80006ac:	4b5b      	ldr	r3, [pc, #364]	; (800081c <GPIO_Init+0x634>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	495b      	ldr	r1, [pc, #364]	; (8000820 <GPIO_Init+0x638>)
 80006b4:	4603      	mov	r3, r0
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	1a1b      	subs	r3, r3, r0
 80006ba:	440b      	add	r3, r1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4958      	ldr	r1, [pc, #352]	; (8000824 <GPIO_Init+0x63c>)
 80006c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c6:	4022      	ands	r2, r4
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
				GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->AFRH |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtAlternativeFunction) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId % 8) * 4));
 80006ca:	4b54      	ldr	r3, [pc, #336]	; (800081c <GPIO_Init+0x634>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4a53      	ldr	r2, [pc, #332]	; (8000820 <GPIO_Init+0x638>)
 80006d2:	460b      	mov	r3, r1
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a51      	ldr	r2, [pc, #324]	; (8000824 <GPIO_Init+0x63c>)
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e6:	4b4d      	ldr	r3, [pc, #308]	; (800081c <GPIO_Init+0x634>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	494c      	ldr	r1, [pc, #304]	; (8000820 <GPIO_Init+0x638>)
 80006ee:	4603      	mov	r3, r0
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	1a1b      	subs	r3, r3, r0
 80006f4:	440b      	add	r3, r1
 80006f6:	3306      	adds	r3, #6
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461c      	mov	r4, r3
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <GPIO_Init+0x634>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	4947      	ldr	r1, [pc, #284]	; (8000820 <GPIO_Init+0x638>)
 8000704:	4603      	mov	r3, r0
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	440b      	add	r3, r1
 800070c:	3301      	adds	r3, #1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	fa04 f303 	lsl.w	r3, r4, r3
 800071a:	461c      	mov	r4, r3
 800071c:	4b3f      	ldr	r3, [pc, #252]	; (800081c <GPIO_Init+0x634>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	493f      	ldr	r1, [pc, #252]	; (8000820 <GPIO_Init+0x638>)
 8000724:	4603      	mov	r3, r0
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	440b      	add	r3, r1
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3b01      	subs	r3, #1
 8000730:	493c      	ldr	r1, [pc, #240]	; (8000824 <GPIO_Init+0x63c>)
 8000732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000736:	4322      	orrs	r2, r4
 8000738:	625a      	str	r2, [r3, #36]	; 0x24

//			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER &= ~(1u << (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));
//			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1]->OTYPER |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtType) <<
//						                                                      (GPIO_udtArrayOfPins[u8PinsCounter].u8PinId));

			GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR &= ~((0b11) << ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <GPIO_Init+0x634>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4619      	mov	r1, r3
 8000740:	4a37      	ldr	r2, [pc, #220]	; (8000820 <GPIO_Init+0x638>)
 8000742:	460b      	mov	r3, r1
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	1a5b      	subs	r3, r3, r1
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a35      	ldr	r2, [pc, #212]	; (8000824 <GPIO_Init+0x63c>)
 8000750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000754:	689a      	ldr	r2, [r3, #8]
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <GPIO_Init+0x634>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	4930      	ldr	r1, [pc, #192]	; (8000820 <GPIO_Init+0x638>)
 800075e:	4603      	mov	r3, r0
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a1b      	subs	r3, r3, r0
 8000764:	440b      	add	r3, r1
 8000766:	3301      	adds	r3, #1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2103      	movs	r1, #3
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	461c      	mov	r4, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <GPIO_Init+0x634>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	4928      	ldr	r1, [pc, #160]	; (8000820 <GPIO_Init+0x638>)
 800077e:	4603      	mov	r3, r0
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	1a1b      	subs	r3, r3, r0
 8000784:	440b      	add	r3, r1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4926      	ldr	r1, [pc, #152]	; (8000824 <GPIO_Init+0x63c>)
 800078c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000790:	4022      	ands	r2, r4
 8000792:	609a      	str	r2, [r3, #8]
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <GPIO_Init+0x634>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	4a21      	ldr	r2, [pc, #132]	; (8000820 <GPIO_Init+0x638>)
 800079c:	460b      	mov	r3, r1
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	1a5b      	subs	r3, r3, r1
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <GPIO_Init+0x63c>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <GPIO_Init+0x634>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	491a      	ldr	r1, [pc, #104]	; (8000820 <GPIO_Init+0x638>)
 80007b8:	4603      	mov	r3, r0
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	1a1b      	subs	r3, r3, r0
 80007be:	440b      	add	r3, r1
 80007c0:	3304      	adds	r3, #4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461c      	mov	r4, r3
		                        												 ((GPIO_udtArrayOfPins[u8PinsCounter].u8PinId) * 2));
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <GPIO_Init+0x634>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	4914      	ldr	r1, [pc, #80]	; (8000820 <GPIO_Init+0x638>)
 80007ce:	4603      	mov	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a1b      	subs	r3, r3, r0
 80007d4:	440b      	add	r3, r1
 80007d6:	3301      	adds	r3, #1
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	005b      	lsls	r3, r3, #1
		    GPIOx[(GPIO_udtArrayOfPins[u8PinsCounter].u8PortId)-1] -> OSPEEDR |= ((GPIO_udtArrayOfPins[u8PinsCounter].udtSpeed) <<
 80007dc:	fa04 f303 	lsl.w	r3, r4, r3
 80007e0:	461c      	mov	r4, r3
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <GPIO_Init+0x634>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	490d      	ldr	r1, [pc, #52]	; (8000820 <GPIO_Init+0x638>)
 80007ea:	4603      	mov	r3, r0
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	440b      	add	r3, r1
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	490b      	ldr	r1, [pc, #44]	; (8000824 <GPIO_Init+0x63c>)
 80007f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fc:	4322      	orrs	r2, r4
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	e004      	b.n	800080c <GPIO_Init+0x624>
		}
		else
		{
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000802:	2202      	movs	r2, #2
 8000804:	2102      	movs	r1, #2
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff fce4 	bl	80001d4 <Det_ReportError>
		}

		u8PinsCounter++;
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <GPIO_Init+0x634>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b01      	ldr	r3, [pc, #4]	; (800081c <GPIO_Init+0x634>)
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	bd98      	pop	{r3, r4, r7, pc}
 800081c:	20000048 	.word	0x20000048
 8000820:	20000000 	.word	0x20000000
 8000824:	2000001c 	.word	0x2000001c

08000828 <GPIO_udtSetPinValue>:

Std_ReturnType GPIO_udtSetPinValue(uint8 u8PortId, uint8 u8PinId, uint8 u8Value)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	4613      	mov	r3, r2
 8000838:	717b      	strb	r3, [r7, #5]
	/* !Comment: Variable for handling the function return value */
	Std_ReturnType udtReturnValue = E_NOT_OK;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]

	if(u8PinId >= 16)
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d905      	bls.n	8000850 <GPIO_udtSetPinValue+0x28>
	{
		Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 8000844:	2202      	movs	r2, #2
 8000846:	2102      	movs	r1, #2
 8000848:	2002      	movs	r0, #2
 800084a:	f7ff fcc3 	bl	80001d4 <Det_ReportError>
 800084e:	e07b      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
	}
	else
	{
		if(u8Value == GPIO_HIGH)
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d136      	bne.n	80008c4 <GPIO_udtSetPinValue+0x9c>
		{
			switch(u8PortId)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d020      	beq.n	800089e <GPIO_udtSetPinValue+0x76>
 800085c:	2b03      	cmp	r3, #3
 800085e:	dc2b      	bgt.n	80008b8 <GPIO_udtSetPinValue+0x90>
 8000860:	2b01      	cmp	r3, #1
 8000862:	d002      	beq.n	800086a <GPIO_udtSetPinValue+0x42>
 8000864:	2b02      	cmp	r3, #2
 8000866:	d00d      	beq.n	8000884 <GPIO_udtSetPinValue+0x5c>
 8000868:	e026      	b.n	80008b8 <GPIO_udtSetPinValue+0x90>
			{
				case GPIO_PORTA: udtReturnValue = E_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
				                 SET_BIT(GPIOA -> ODR, u8PinId);
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <GPIO_udtSetPinValue+0x12c>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	79ba      	ldrb	r2, [r7, #6]
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	4611      	mov	r1, r2
 800087c:	4a35      	ldr	r2, [pc, #212]	; (8000954 <GPIO_udtSetPinValue+0x12c>)
 800087e:	430b      	orrs	r3, r1
 8000880:	6153      	str	r3, [r2, #20]
								 break;
 8000882:	e061      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				case GPIO_PORTB: udtReturnValue = E_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
				                 SET_BIT(GPIOB -> ODR, u8PinId);
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <GPIO_udtSetPinValue+0x130>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	79ba      	ldrb	r2, [r7, #6]
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f202 	lsl.w	r2, r1, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a30      	ldr	r2, [pc, #192]	; (8000958 <GPIO_udtSetPinValue+0x130>)
 8000898:	430b      	orrs	r3, r1
 800089a:	6153      	str	r3, [r2, #20]
								 break;
 800089c:	e054      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				case GPIO_PORTC: udtReturnValue = E_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
				                 SET_BIT(GPIOC -> ODR, u8PinId);
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <GPIO_udtSetPinValue+0x134>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	79ba      	ldrb	r2, [r7, #6]
 80008a8:	2101      	movs	r1, #1
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a2a      	ldr	r2, [pc, #168]	; (800095c <GPIO_udtSetPinValue+0x134>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6153      	str	r3, [r2, #20]
								 break;
 80008b6:	e047      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				default: Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PORT_ID, GPIO_UDT_SET_PIN_VALUE_ID);
 80008b8:	2202      	movs	r2, #2
 80008ba:	2101      	movs	r1, #1
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fc89 	bl	80001d4 <Det_ReportError>
				break;
 80008c2:	e041      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
			}
		}
		else if(u8Value == GPIO_LOW)
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d139      	bne.n	800093e <GPIO_udtSetPinValue+0x116>
		{
			switch(u8PortId)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d022      	beq.n	8000916 <GPIO_udtSetPinValue+0xee>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	dc2e      	bgt.n	8000932 <GPIO_udtSetPinValue+0x10a>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d002      	beq.n	80008de <GPIO_udtSetPinValue+0xb6>
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d00e      	beq.n	80008fa <GPIO_udtSetPinValue+0xd2>
 80008dc:	e029      	b.n	8000932 <GPIO_udtSetPinValue+0x10a>
			{
				case GPIO_PORTA: udtReturnValue = E_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
				                 CLR_BIT(GPIOA -> ODR, u8PinId);
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <GPIO_udtSetPinValue+0x12c>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	79ba      	ldrb	r2, [r7, #6]
 80008e8:	2101      	movs	r1, #1
 80008ea:	fa01 f202 	lsl.w	r2, r1, r2
 80008ee:	43d2      	mvns	r2, r2
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <GPIO_udtSetPinValue+0x12c>)
 80008f4:	400b      	ands	r3, r1
 80008f6:	6153      	str	r3, [r2, #20]
								 break;
 80008f8:	e026      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				case GPIO_PORTB: udtReturnValue = E_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
				                 CLR_BIT(GPIOB -> ODR, u8PinId);
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <GPIO_udtSetPinValue+0x130>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <GPIO_udtSetPinValue+0x130>)
 8000910:	400b      	ands	r3, r1
 8000912:	6153      	str	r3, [r2, #20]
								 break;
 8000914:	e018      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				case GPIO_PORTC: udtReturnValue = E_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
				                 CLR_BIT(GPIOC -> ODR, u8PinId);
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <GPIO_udtSetPinValue+0x134>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	79ba      	ldrb	r2, [r7, #6]
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	43d2      	mvns	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <GPIO_udtSetPinValue+0x134>)
 800092c:	400b      	ands	r3, r1
 800092e:	6153      	str	r3, [r2, #20]
								 break;
 8000930:	e00a      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
				default:  Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PORT_ID, GPIO_UDT_SET_PIN_VALUE_ID);
 8000932:	2202      	movs	r2, #2
 8000934:	2101      	movs	r1, #1
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fc4c 	bl	80001d4 <Det_ReportError>
				break;
 800093c:	e004      	b.n	8000948 <GPIO_udtSetPinValue+0x120>
			}
		}
		else
		{
			Det_ReportError(GPIO_MODULE_ID, GPIO_INVALID_PIN_STATE, GPIO_UDT_SET_PIN_VALUE_ID);
 800093e:	2202      	movs	r2, #2
 8000940:	2102      	movs	r1, #2
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fc46 	bl	80001d4 <Det_ReportError>
		}

	}

	return udtReturnValue;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400
 800095c:	40020800 	.word	0x40020800

08000960 <RCC_udtInitSystemClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

Std_ReturnType RCC_udtInitSystemClock (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_SELECTION  == RCC_HSI
	
	#elif RCC_CLOCK_SELECTION == RCC_HSE_RC
	
	#elif RCC_CLOCK_SELECTION == RCC_HSE_CRYSTAL
	RCC -> CR   = 0x00010000;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <RCC_udtInitSystemClock+0x20>)
 8000966:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800096a:	601a      	str	r2, [r3, #0]
	RCC -> CFGR = 0x00000001;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <RCC_udtInitSystemClock+0x20>)
 800096e:	2201      	movs	r2, #1
 8000970:	609a      	str	r2, [r3, #8]
	
	#else 
		#error "Invalid clock selection"
	#endif 

	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_udtEnablePeripheralClock>:

Std_ReturnType RCC_udtEnablePeripheralClock (uint8 u8BusId, uint8 u8PerId)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType udtReturnValue = E_NOT_OK;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
	
	if(u8PerId <= RCC_MAX_PERIPHERAL_ID)
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b1f      	cmp	r3, #31
 800099c:	d831      	bhi.n	8000a02 <RCC_udtEnablePeripheralClock+0x7e>
	{
		switch(u8BusId)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d020      	beq.n	80009e6 <RCC_udtEnablePeripheralClock+0x62>
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dc2b      	bgt.n	8000a00 <RCC_udtEnablePeripheralClock+0x7c>
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d002      	beq.n	80009b2 <RCC_udtEnablePeripheralClock+0x2e>
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d00d      	beq.n	80009cc <RCC_udtEnablePeripheralClock+0x48>
						
			default   : /* !Comment: Report Error */
			            #if RCC_DET_USED == STD_ON
			            /* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_BUS_ID); */
						#endif
			            break;
 80009b0:	e026      	b.n	8000a00 <RCC_udtEnablePeripheralClock+0x7c>
			case AHB  : SET_BIT(RCC -> AHB1ENR, u8PerId);
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	79ba      	ldrb	r2, [r7, #6]
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
			            udtReturnValue = E_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
			            break;
 80009ca:	e01a      	b.n	8000a02 <RCC_udtEnablePeripheralClock+0x7e>
			case APB1 : SET_BIT(RCC -> APB1ENR, u8PerId);
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
			            udtReturnValue = E_OK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
			            break;
 80009e4:	e00d      	b.n	8000a02 <RCC_udtEnablePeripheralClock+0x7e>
			case APB2 : SET_BIT(RCC -> APB2ENR, u8PerId);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <RCC_udtEnablePeripheralClock+0x8c>)
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
			            udtReturnValue = E_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
			            break;
 80009fe:	e000      	b.n	8000a02 <RCC_udtEnablePeripheralClock+0x7e>
			            break;
 8000a00:	bf00      	nop
		#if RCC_DET_USED == STD_ON
		/* Det_ReportError(RCC_ID, RCC_udtEnablePeripheralClock_ID, RCC_INVALID_PERIPHERAL_ID);*/
		#endif
	}
	
	return udtReturnValue;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40023800 	.word	0x40023800

08000a14 <SPI_vidInit>:
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_vidInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	SPI -> CR1 = 0x0347;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SPI_vidInit+0x18>)
 8000a1a:	f240 3247 	movw	r2, #839	; 0x347
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000

08000a30 <SPI_udtTransceive>:

Std_ReturnType SPI_udtTransceive (uint8 u8Data, uint8* pu8ReceivedData)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
	
	uint8 u8LocalFlag = 0u;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73bb      	strb	r3, [r7, #14]
	
    uint32 u32LocalCounter = 0u;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
	
	SPI -> DR = u8Data;
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <SPI_udtTransceive+0x64>)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	60d3      	str	r3, [r2, #12]
	
	while(GET_BIT(SPI -> SR, 7) == 1u)
 8000a4e:	e009      	b.n	8000a64 <SPI_udtTransceive+0x34>
	{
		u32LocalCounter++;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
		
		if(u32LocalCounter == SPI_USER_TIMEOUT)
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <SPI_udtTransceive+0x68>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d102      	bne.n	8000a64 <SPI_udtTransceive+0x34>
		{
			u8LocalFlag = 1u;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73bb      	strb	r3, [r7, #14]
			break;
 8000a62:	e005      	b.n	8000a70 <SPI_udtTransceive+0x40>
	while(GET_BIT(SPI -> SR, 7) == 1u)
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SPI_udtTransceive+0x64>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ef      	bne.n	8000a50 <SPI_udtTransceive+0x20>
		}
	}
	
	if(u8LocalFlag == 0u)
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <SPI_udtTransceive+0x54>
	{
		*pu8ReceivedData = SPI -> DR;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <SPI_udtTransceive+0x64>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	701a      	strb	r2, [r3, #0]
		
		udtRetVal = E_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
	}
	
	return udtRetVal;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	00030d40 	.word	0x00030d40

08000a9c <SYSTICK_udtSynchMsecondsDelay>:
		
	return udtRetVal;	
}

Std_ReturnType SYSTICK_udtSynchMsecondsDelay (uint16 u16Mseconds)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
	
	if(SYSTICK_u8IsInitialized == SYSTICK_INIT)
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <SYSTICK_udtSynchMsecondsDelay+0x78>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d129      	bne.n	8000b06 <SYSTICK_udtSynchMsecondsDelay+0x6a>
	{
		udtRetVal = E_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
		
		/* !Comment: A write of any value clears the field to 0,
         *          	and also clears the COUNTFLAG bit in the STK_CTRL register to 0.        
	     */
	    SYSTICK -> VAL.R  = 0u;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
	    SYSTICK -> LOAD.R = 0;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
        
	    uint16 u16LocalCounter = 0u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	81bb      	strh	r3, [r7, #12]
	    
	    for(u16LocalCounter = 0u; u16LocalCounter < u16Mseconds; u16LocalCounter++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	81bb      	strh	r3, [r7, #12]
 8000aca:	e018      	b.n	8000afe <SYSTICK_udtSynchMsecondsDelay+0x62>
	    {
	    	/* !Comment: load 1 sec */
	    	SYSTICK -> LOAD.R = 3125u;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000ace:	f640 4235 	movw	r2, #3125	; 0xc35
 8000ad2:	605a      	str	r2, [r3, #4]
	    	
	    	/* !Comment: Enable the systick */
	    	SYSTICK -> CTRL.B.ENABLE = 1u;
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]
	    	
	    	/* !Comment: Wait for count flag */
	    	while(SYSTICK -> CTRL.B.COUNTFLAG == 0u);
 8000ade:	bf00      	nop
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f8      	beq.n	8000ae0 <SYSTICK_udtSynchMsecondsDelay+0x44>
	    	
	    	/* !Comment: clear count flag */
	    	SYSTICK -> CTRL.B.COUNTFLAG = 0u;	
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SYSTICK_udtSynchMsecondsDelay+0x7c>)
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f36f 4310 	bfc	r3, #16, #1
 8000af6:	6013      	str	r3, [r2, #0]
	    for(u16LocalCounter = 0u; u16LocalCounter < u16Mseconds; u16LocalCounter++)
 8000af8:	89bb      	ldrh	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	81bb      	strh	r3, [r7, #12]
 8000afe:	89ba      	ldrh	r2, [r7, #12]
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3e2      	bcc.n	8000acc <SYSTICK_udtSynchMsecondsDelay+0x30>
		}
	}
		
	return udtRetVal;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20000028 	.word	0x20000028
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <SYSTICK_udtSynchUsecondsDelay>:
Std_ReturnType SYSTICK_udtSynchUsecondsDelay (uint16 u16Useconds)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType udtRetVal = E_NOT_OK;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
	
	if(SYSTICK_u8IsInitialized == SYSTICK_INIT)
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <SYSTICK_udtSynchUsecondsDelay+0x78>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d128      	bne.n	8000b84 <SYSTICK_udtSynchUsecondsDelay+0x68>
	{
		udtRetVal = E_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
		
		/* !Comment: A write of any value clears the field to 0,
         *          	and also clears the COUNTFLAG bit in the STK_CTRL register to 0.        
	     */
	    SYSTICK -> VAL.R  = 0u;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	    SYSTICK -> LOAD.R = 0;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
        
	    uint16 u16LocalCounter = 0u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	81bb      	strh	r3, [r7, #12]
	    
	    for(u16LocalCounter = 0u; u16LocalCounter < u16Useconds; u16LocalCounter++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	81bb      	strh	r3, [r7, #12]
 8000b4a:	e017      	b.n	8000b7c <SYSTICK_udtSynchUsecondsDelay+0x60>
	    {
	    	/* !Comment: load 1 sec */
	    	SYSTICK -> LOAD.R = 3u;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b4e:	2203      	movs	r2, #3
 8000b50:	605a      	str	r2, [r3, #4]
	    	
	    	/* !Comment: Enable the systick */
	    	SYSTICK -> CTRL.B.ENABLE = 1u;
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b54:	6813      	ldr	r3, [r2, #0]
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
	    	
	    	/* !Comment: Wait for count flag */
	    	while(SYSTICK -> CTRL.B.COUNTFLAG == 0u);
 8000b5c:	bf00      	nop
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f8      	beq.n	8000b5e <SYSTICK_udtSynchUsecondsDelay+0x42>
	    	
	    	/* !Comment: clear count flag */
	    	SYSTICK -> CTRL.B.COUNTFLAG = 0u;	
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SYSTICK_udtSynchUsecondsDelay+0x7c>)
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f36f 4310 	bfc	r3, #16, #1
 8000b74:	6013      	str	r3, [r2, #0]
	    for(u16LocalCounter = 0u; u16LocalCounter < u16Useconds; u16LocalCounter++)
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	81bb      	strh	r3, [r7, #12]
 8000b7c:	89ba      	ldrh	r2, [r7, #12]
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3e3      	bcc.n	8000b4c <SYSTICK_udtSynchUsecondsDelay+0x30>
		}
	}
		
	return udtRetVal;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000028 	.word	0x20000028
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <SYSTICK_vidInit>:
		
	return udtRetVal;	
}

void SYSTICK_vidInit (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	SYSTICK_u8IsInitialized = SYSTICK_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SYSTICK_vidInit+0x20>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	701a      	strb	r2, [r3, #0]
	
#if SYSTICK_CLOCK_SOURCE == SYSTICK_AHB
	SYSTICK -> CTRL.B.CLKSOURCE = 1u;
	
#elif SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8
	SYSTICK -> CTRL.B.CLKSOURCE = 0u; 
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <SYSTICK_vidInit+0x24>)
 8000ba8:	6813      	ldr	r3, [r2, #0]
 8000baa:	f36f 0382 	bfc	r3, #2, #1
 8000bae:	6013      	str	r3, [r2, #0]
	
#else
	#error "Invalid clock source selection!!"

#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <SysTick_Handler>:
	
	return udtRetVal;
}

void SysTick_Handler (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	static uint16 u16Counter = 1u;

    if(u16Counter == SYSTICK_u16GlobalSeconds)
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <SysTick_Handler+0x4c>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <SysTick_Handler+0x50>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d114      	bne.n	8000c00 <SysTick_Handler+0x3c>
	{
		SYSTICK_pvCallBack();
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <SysTick_Handler+0x54>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4798      	blx	r3
		u16Counter = 1u;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <SysTick_Handler+0x4c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	801a      	strh	r2, [r3, #0]
		
		if(SYSTICK_u8SingleIndicator == 1u)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <SysTick_Handler+0x58>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10f      	bne.n	8000c0c <SysTick_Handler+0x48>
		{
			SYSTICK -> VAL.R  = 0u;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <SysTick_Handler+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
		    SYSTICK -> LOAD.R = 0u;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <SysTick_Handler+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
		    SYSTICK -> CTRL.R = 0u;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <SysTick_Handler+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
	}
    else
	{
		u16Counter++;
	}		
}
 8000bfe:	e005      	b.n	8000c0c <SysTick_Handler+0x48>
		u16Counter++;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <SysTick_Handler+0x4c>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b01      	ldr	r3, [pc, #4]	; (8000c10 <SysTick_Handler+0x4c>)
 8000c0a:	801a      	strh	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000002a 	.word	0x2000002a
 8000c14:	20000050 	.word	0x20000050
 8000c18:	2000004c 	.word	0x2000004c
 8000c1c:	20000052 	.word	0x20000052
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <TFT_vidInit>:
#include "TFT_config.h"
#include "TFT_private.h"


void TFT_vidInit (void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	/* !Comment: Reset pulse */
	GPIO_udtSetPinValue(TFT_RESET_PIN, GPIO_HIGH);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff fdfa 	bl	8000828 <GPIO_udtSetPinValue>
	SYSTICK_udtSynchUsecondsDelay(100);
 8000c34:	2064      	movs	r0, #100	; 0x64
 8000c36:	f7ff ff71 	bl	8000b1c <SYSTICK_udtSynchUsecondsDelay>
	
	GPIO_udtSetPinValue(TFT_RESET_PIN, GPIO_LOW);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fdf2 	bl	8000828 <GPIO_udtSetPinValue>
	SYSTICK_udtSynchUsecondsDelay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff69 	bl	8000b1c <SYSTICK_udtSynchUsecondsDelay>
	
	GPIO_udtSetPinValue(TFT_RESET_PIN, GPIO_HIGH);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fdea 	bl	8000828 <GPIO_udtSetPinValue>
	SYSTICK_udtSynchUsecondsDelay(100);
 8000c54:	2064      	movs	r0, #100	; 0x64
 8000c56:	f7ff ff61 	bl	8000b1c <SYSTICK_udtSynchUsecondsDelay>
	
	GPIO_udtSetPinValue(TFT_RESET_PIN, GPIO_LOW);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fde2 	bl	8000828 <GPIO_udtSetPinValue>
	SYSTICK_udtSynchUsecondsDelay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f7ff ff59 	bl	8000b1c <SYSTICK_udtSynchUsecondsDelay>
	
	GPIO_udtSetPinValue(TFT_RESET_PIN, GPIO_HIGH);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fdda 	bl	8000828 <GPIO_udtSetPinValue>
	SYSTICK_udtSynchMsecondsDelay(120);
 8000c74:	2078      	movs	r0, #120	; 0x78
 8000c76:	f7ff ff11 	bl	8000a9c <SYSTICK_udtSynchMsecondsDelay>
	
	/* !Comment: Send SLPOUT command */
	uint8 u8TempVar;
	
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fdd2 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x11, &u8TempVar);
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	4619      	mov	r1, r3
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f7ff fed1 	bl	8000a30 <SPI_udtTransceive>
	
	/* !Comment: Wait 150 ms */
	SYSTICK_udtSynchMsecondsDelay(150);
 8000c8e:	2096      	movs	r0, #150	; 0x96
 8000c90:	f7ff ff04 	bl	8000a9c <SYSTICK_udtSynchMsecondsDelay>
	
	/* !Comment: COLMOD configurations */	
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);    // enter color mode
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fdc5 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x3A, &u8TempVar);
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	203a      	movs	r0, #58	; 0x3a
 8000ca4:	f7ff fec4 	bl	8000a30 <SPI_udtTransceive>
	
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_HIGH);  // select color standard  RGB565
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2100      	movs	r1, #0
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff fdbb 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x05, &u8TempVar);
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2005      	movs	r0, #5
 8000cb8:	f7ff feba 	bl	8000a30 <SPI_udtTransceive>
	
	/* !Comment: Display mode */
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fdb1 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x29, &u8TempVar);
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2029      	movs	r0, #41	; 0x29
 8000ccc:	f7ff feb0 	bl	8000a30 <SPI_udtTransceive>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <TFT_udtDisplayImage>:

Std_ReturnType TFT_udtDisplayImage (const uint16* pu16Image)
{	
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    /* !Comment: A temporary variable for handling the 2nd SPI API parameter */
    uint8 u8TempVar;

	/* !Comment: Set x address */
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fd9f 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x2A, &u8TempVar);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	202a      	movs	r0, #42	; 0x2a
 8000cf2:	f7ff fe9d 	bl	8000a30 <SPI_udtTransceive>
	
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_HIGH); 
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fd94 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fe92 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe8c 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fe86 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(127, &u8TempVar);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	207f      	movs	r0, #127	; 0x7f
 8000d2c:	f7ff fe80 	bl	8000a30 <SPI_udtTransceive>
	
	/* !Comment: Set y address */
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fd77 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x2B, &u8TempVar);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	202b      	movs	r0, #43	; 0x2b
 8000d42:	f7ff fe75 	bl	8000a30 <SPI_udtTransceive>
	
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_HIGH); 
 8000d46:	2201      	movs	r2, #1
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fd6c 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe6a 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe64 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(0  , &u8TempVar);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fe5e 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(159, &u8TempVar);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	209f      	movs	r0, #159	; 0x9f
 8000d7c:	f7ff fe58 	bl	8000a30 <SPI_udtTransceive>
	
	/* !Comment: RAM write */
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_LOW);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fd4f 	bl	8000828 <GPIO_udtSetPinValue>
	SPI_udtTransceive(0x2C, &u8TempVar);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4619      	mov	r1, r3
 8000d90:	202c      	movs	r0, #44	; 0x2c
 8000d92:	f7ff fe4d 	bl	8000a30 <SPI_udtTransceive>
	SPI_udtTransceive(0x21, &u8TempVar);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2021      	movs	r0, #33	; 0x21
 8000d9e:	f7ff fe47 	bl	8000a30 <SPI_udtTransceive>
	
	/* !Comment:  Displaying the image */
	GPIO_udtSetPinValue(TFT_A0_PIN, GPIO_HIGH); 
 8000da2:	2201      	movs	r2, #1
 8000da4:	2100      	movs	r1, #0
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fd3e 	bl	8000828 <GPIO_udtSetPinValue>
	
	uint16 u16LocalCounter = 0u;
 8000dac:	2300      	movs	r3, #0
 8000dae:	81fb      	strh	r3, [r7, #14]
	uint8  u8LocalData = 0u;
 8000db0:	2300      	movs	r3, #0
 8000db2:	737b      	strb	r3, [r7, #13]
	for(u16LocalCounter = 0; u16LocalCounter < 20480; u16LocalCounter++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	e01e      	b.n	8000df8 <TFT_udtDisplayImage+0x120>
	{
		u8LocalData = pu16Image[u16LocalCounter] >> 8u;
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	737b      	strb	r3, [r7, #13]
		SPI_udtTransceive(u8LocalData, &u8TempVar);
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe2c 	bl	8000a30 <SPI_udtTransceive>
		
		u8LocalData = pu16Image[u16LocalCounter];
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	737b      	strb	r3, [r7, #13]
		SPI_udtTransceive(u8LocalData, &u8TempVar);
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	7b7b      	ldrb	r3, [r7, #13]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe1f 	bl	8000a30 <SPI_udtTransceive>
	for(u16LocalCounter = 0; u16LocalCounter < 20480; u16LocalCounter++)
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	3301      	adds	r3, #1
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	89fb      	ldrh	r3, [r7, #14]
 8000dfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000dfe:	d3dc      	bcc.n	8000dba <TFT_udtDisplayImage+0xe2>
	}
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <main>:
#include "RCC_interface.h"
#include "TFT_interface.h"
#include "image.h"

int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	/* RCC */
	RCC_udtInitSystemClock();
 8000e12:	f7ff fda5 	bl	8000960 <RCC_udtInitSystemClock>
	RCC_udtEnablePeripheralClock(AHB, 0);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fdb3 	bl	8000984 <RCC_udtEnablePeripheralClock>
	RCC_udtEnablePeripheralClock(APB2, 12);
 8000e1e:	210c      	movs	r1, #12
 8000e20:	2003      	movs	r0, #3
 8000e22:	f7ff fdaf 	bl	8000984 <RCC_udtEnablePeripheralClock>

	/*GPIO */
	for(int i = 0; i < 4; i++ )
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e004      	b.n	8000e36 <main+0x2a>
	{
		GPIO_Init();
 8000e2c:	f7ff f9dc 	bl	80001e8 <GPIO_Init>
	for(int i = 0; i < 4; i++ )
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	ddf7      	ble.n	8000e2c <main+0x20>
	}


	/*SYSTICK */
	SYSTICK_vidInit();
 8000e3c:	f7ff feae 	bl	8000b9c <SYSTICK_vidInit>

	/*SPI */
	SPI_vidInit();
 8000e40:	f7ff fde8 	bl	8000a14 <SPI_vidInit>

	/*TFT*/
	TFT_vidInit();
 8000e44:	f7ff feee 	bl	8000c24 <TFT_vidInit>

	TFT_udtDisplayImage(TFT_u16Image);
 8000e48:	4801      	ldr	r0, [pc, #4]	; (8000e50 <main+0x44>)
 8000e4a:	f7ff ff45 	bl	8000cd8 <TFT_udtDisplayImage>

	while(1);
 8000e4e:	e7fe      	b.n	8000e4e <main+0x42>
 8000e50:	08000f08 	.word	0x08000f08

08000e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e82:	f000 f811 	bl	8000ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff ffc1 	bl	8000e0c <main>

08000e8a <LoopForever>:

LoopForever:
  b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   r0, =_estack
 8000e8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000e98:	0800af10 	.word	0x0800af10
  ldr r2, =_sbss
 8000e9c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000ea0:	20000054 	.word	0x20000054

08000ea4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <__libc_init_array>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4d0d      	ldr	r5, [pc, #52]	; (8000ee0 <__libc_init_array+0x38>)
 8000eac:	4c0d      	ldr	r4, [pc, #52]	; (8000ee4 <__libc_init_array+0x3c>)
 8000eae:	1b64      	subs	r4, r4, r5
 8000eb0:	10a4      	asrs	r4, r4, #2
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	42a6      	cmp	r6, r4
 8000eb6:	d109      	bne.n	8000ecc <__libc_init_array+0x24>
 8000eb8:	4d0b      	ldr	r5, [pc, #44]	; (8000ee8 <__libc_init_array+0x40>)
 8000eba:	4c0c      	ldr	r4, [pc, #48]	; (8000eec <__libc_init_array+0x44>)
 8000ebc:	f000 f818 	bl	8000ef0 <_init>
 8000ec0:	1b64      	subs	r4, r4, r5
 8000ec2:	10a4      	asrs	r4, r4, #2
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	42a6      	cmp	r6, r4
 8000ec8:	d105      	bne.n	8000ed6 <__libc_init_array+0x2e>
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed0:	4798      	blx	r3
 8000ed2:	3601      	adds	r6, #1
 8000ed4:	e7ee      	b.n	8000eb4 <__libc_init_array+0xc>
 8000ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eda:	4798      	blx	r3
 8000edc:	3601      	adds	r6, #1
 8000ede:	e7f2      	b.n	8000ec6 <__libc_init_array+0x1e>
 8000ee0:	0800af08 	.word	0x0800af08
 8000ee4:	0800af08 	.word	0x0800af08
 8000ee8:	0800af08 	.word	0x0800af08
 8000eec:	0800af0c 	.word	0x0800af0c

08000ef0 <_init>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr

08000efc <_fini>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr
